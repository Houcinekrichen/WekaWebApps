package com.weka.web;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;

import weka.classifiers.Classifier;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.RandomForest;
import weka.core.Instances;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVSaver;

@Controller
public class Contoller {

	@RequestMapping("/index")
	public String validerCompte(Model model) {

		List<Class> tabOcc = new ArrayList<>();
		NaiveBayes nb = new NaiveBayes();
		Classifier j = new J48();

		RandomForest rf = new RandomForest();

		try {
			// load ARFF
			ArffLoader loader = new ArffLoader();
			loader.setSource(new File("D:/wekaworkspace/zoo.arff"));
			Instances data = loader.getDataSet();
			// get instances object
			// save CSV
			CSVSaver saver = new CSVSaver();
			saver.setInstances(data);// set the dataset to convert
			// and save as CSV

			int index1 = data.numAttributes() - 1;
			// saver.setFile(new File("D:/wekaworkspace/data.csv"));
			// saver.writeBatch();

			// load dataset
			// set class index to the last attribute
			data.setClassIndex(index1);

			Instances test = new Instances(new BufferedReader(new FileReader("D:/wekaworkspace/aa.arff")));
			test.setClassIndex(index1);

			j.buildClassifier(data);

			nb.buildClassifier(data);

			Vector<String> a = new Vector<>();
			Class c = new Class();

			for (int i = 0; i < test.numInstances(); i++) {

				double index = j.classifyInstance(test.instance(i));
				String className = data.attribute(index1).value((int) index);
				System.out.println(className);
				a.add(className);
			}

			for (String className : a) {

				boolean tests = true;

				for (Class cl : tabOcc) {

					if (className.equals(cl.getClassName())) {
						cl.setOcc(cl.getOcc() + 1);
						tests = false;
					}

				}
				if (tests) {
					Class obj = new Class();
					obj.setClassName(className);
					obj.setOcc(1);
					tabOcc.add(obj);

				}

			}

			for (Class cm : tabOcc) {
				System.out.println("Class : " + cm.getClassName() + "  occ :  " + cm.getOcc());
			}

			// create and build the classifier!

			// evaluate theclassifier
			// Evaluation eval = new Evaluation(data);

			// System.out.println(data);
			// System.out.println(nb);

		} catch (Exception e) {

			e.printStackTrace();
		}

		model.addAttribute("data1", tabOcc);
		model.addAttribute("message", "aaaaaaaaa");
		model.addAttribute("demo", j);

		return ("index");
	}

}
